package tsparser

import (
	"reflect"
	"testing"

	"github.com/small-teton/mpeg-ts-analyzer/options"
)

func TestNewTsPacket(t *testing.T) {
	tp := NewTsPacket()
	if _, ok := interface{}(tp).(*TsPacket); !ok {
		t.Errorf("actual: *tsparser.Pmt, But got %s", reflect.TypeOf(tp))
	}
}

func TestTsPacketInitialize(t *testing.T) {
	var options options.Options
	options.SetDumpHeader(true)
	tp1 := NewTsPacket()
	tp1.Initialize(1, options)

	if tp1.pos != 1 {
		t.Errorf("actual: 1, But got %d", tp1.pos)
	}
	if !tp1.options.DumpHeader() {
		t.Errorf("actual: true, But got false")
	}

	data := []byte{
		0x47, 0x40, 0x00, 0x10, 0x00, 0x00, 0xB0, 0x0D, 0x00, 0x3F, 0xC1, 0x00, 0x00, 0x00, 0x01, 0xE0,
		0x3F, 0x2D, 0xBC, 0xB0, 0x53, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	}
	tp2 := NewTsPacket()
	tp2.Append(data)
	if err := tp2.Parse(); err != nil {
		t.Errorf("Parse error: %s", err)
	}
	tp2.Initialize(1, options)

	if !reflect.DeepEqual(tp1, tp2) {
		t.Errorf("Failed Initialize in tp1 and tp2")
	}
}

func TestTsPacketAppend(t *testing.T) {
	data1 := []byte{0xc2, 0x93, 0x70, 0x16, 0x2d, 0x08, 0xa2, 0xf1, 0x3a, 0x5c, 0xf9, 0xde, 0xbc, 0xee, 0xfc, 0x90, 0x63}
	data2 := []byte{0x19, 0xed, 0x5d, 0xda, 0x57, 0x4b, 0xa0, 0x22, 0x2b, 0x1e, 0xf7, 0xb1, 0x66, 0xf6, 0x2b, 0x29, 0x43}

	tp := NewTsPacket()
	tp.Append(data1)

	if len(tp.buf) != len(data1) {
		t.Errorf("length is different: actual %d, But got %d", len(data1), len(tp.buf))
	}
	for i, val := range data1 {
		if tp.buf[i] != val {
			t.Errorf("actual: %x, But got %x", val, tp.buf[i])
		}
	}

	tp.Append(data2)
	if len(tp.buf) != len(data1)+len(data2) {
		t.Errorf("length is different: actual %d, But got %d", len(data1)+len(data2), len(tp.buf))
	}
	offset := len(data1)
	for i, val := range data2 {
		if tp.buf[offset+i] != val {
			t.Errorf("actual: %x, But got %x", val, tp.buf[offset+i])
		}
	}
}

func TestHasAf(t *testing.T) {
	tp := NewTsPacket()

	tp.adaptationFieldControl = 0
	if tp.HasAf() {
		t.Errorf("actual: false, But got true")
	}
	tp.adaptationFieldControl = 1
	if tp.HasAf() {
		t.Errorf("actual: false, But got true")
	}
	tp.adaptationFieldControl = 2
	if !tp.HasAf() {
		t.Errorf("actual: true, But got false")
	}
	tp.adaptationFieldControl = 3
	if !tp.HasAf() {
		t.Errorf("actual: true, But got false")
	}
}

func TestPcr(t *testing.T) {
	// tp := NewTsPacket()

	// tp.tp.adaptationField.pcr = true
	// if !tp.Pcr() {
	// 	t.Errorf("actual: true, But got false")
	// }

	// tp.dumpPsi = false
	// retVal = tp.DumpPsi()
	// if tp.Pcr() {
	// 	t.Errorf("actual: false, But got true")
	// }
}

func TestParse(t *testing.T) {
	data := []byte{
		0x47, 0x40, 0x00, 0x10, 0x00, 0x00, 0xB0, 0x0D, 0x00, 0x3F, 0xC1, 0x00, 0x00, 0x00, 0x01, 0xE0,
		0x3F, 0x2D, 0xBC, 0xB0, 0x53, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	}
	tp := NewTsPacket()
	tp.Append(data)
	if err := tp.Parse(); err != nil {
		t.Errorf("Parse error: %s", err)
	}

	err := false
	err = err || tp.syncByte != 0x47
	err = err || tp.transportErrorIndicator != 0x0
	err = err || tp.payloadUnitStartIndicator != 0x1
	err = err || tp.transportPriority != 0x0
	err = err || tp.pid != 0x00
	err = err || tp.transportScramblingControl != 0x0
	err = err || tp.adaptationFieldControl != 0x1
	err = err || tp.continuityCounter != 0x0
	if err {
		t.Errorf("Parse error")
	}
}

func TestPayload(t *testing.T) {
	data := []byte{
		0x47, 0x40, 0x00, 0x10, 0x00, 0x00, 0xB0, 0x0D, 0x00, 0x3F, 0xC1, 0x00, 0x00, 0x00, 0x01, 0xE0,
		0x3F, 0x2D, 0xBC, 0xB0, 0x53, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	}
	tp := NewTsPacket()
	tp.Append(data)
	tp.Parse()

	payload := tp.Payload()
	if len(data)-4 != len(payload) {
		t.Errorf("actual: %d, But got %d", len(data)-4, len(payload))
	}
	for i, val := range payload {
		if val != data[4+i] {
			t.Errorf("actual: %x, But got %x", data[4+i], val)
		}
	}
}

func TestPayloadUnitStartIndicator(t *testing.T) {
	tp := NewTsPacket()

	var actual uint8 = 0x1
	tp.payloadUnitStartIndicator = actual
	retVal := tp.PayloadUnitStartIndicator()
	if !retVal {
		t.Errorf("actual: 0x1, But got 0x0")
	}

	actual = 0x0
	tp.payloadUnitStartIndicator = actual
	retVal = tp.PayloadUnitStartIndicator()
	if retVal {
		t.Errorf("actual: 0x0, But got 0x1")
	}
}

func TestPid(t *testing.T) {
	tp := NewTsPacket()

	var actual uint16 = 0x1
	tp.pid = actual
	retVal := tp.Pid()
	if retVal != actual {
		t.Errorf("actual: %x, But got %d", actual, retVal)
	}

	actual = 0x5
	tp.pid = actual
	retVal = tp.Pid()
	if retVal != actual {
		t.Errorf("actual: %x, But got %d", actual, retVal)
	}
}

func TestTsPacketContinuityCounter(t *testing.T) {
	tp := NewTsPacket()

	var actual uint8 = 0x1
	tp.continuityCounter = actual
	retVal := tp.ContinuityCounter()
	if retVal != actual {
		t.Errorf("actual: %x, But got %d", actual, retVal)
	}

	actual = 0x5
	tp.continuityCounter = actual
	retVal = tp.ContinuityCounter()
	if retVal != actual {
		t.Errorf("actual: %x, But got %d", actual, retVal)
	}
}
